/**
 * Jest reporter for generating OpenAPI documentation
 */

import { AggregatedResult, Test, TestResult } from '@jest/test-result';
import { Config } from '@jest/types';
import * as fs from 'fs';
import * as path from 'path';
import {
  defaultGenerator,
  OpenAPIGenerator,
} from '../generator/openapi-generator';
import { apiSpecs, clearApiSpecs, loadSpecsFromFile } from '../utils';

export default class JestSwagReporter {
  private config: Config.GlobalConfig;
  private generator: OpenAPIGenerator;

  constructor(globalConfig: Config.GlobalConfig, options: any = {}) {
    this.config = globalConfig;

    // Initialize generator with custom options if provided
    this.generator = options.generator || defaultGenerator;

    // Configure generator from options
    if (
      options.title ||
      options.version ||
      options.description ||
      options.servers ||
      options.outputPath
    ) {
      this.generator = new OpenAPIGenerator({
        title: options.title || 'API Documentation',
        version: options.version || '1.0.0',
        description: options.description,
        servers: options.servers,
        outputPath: options.outputPath,
      });
    }
  }

  onRunStart(): void {
    // Clear any existing specs at the start
    clearApiSpecs();
    console.log('üöÄ Starting jest-swag documentation generation...');
  }

  onTestResult(test: Test, testResult: TestResult): void {
    // Tests are collecting API specs as they run
    // We don't need to do anything here
  }

  async onRunComplete(
    contexts: Set<any>,
    results: AggregatedResult,
  ): Promise<void> {
    try {
      // Load specs from file system (for cross-process compatibility)
      const fileSpecs = loadSpecsFromFile();
      const allSpecs = [...apiSpecs, ...fileSpecs];

      if (allSpecs.length === 0) {
        console.log(
          '‚ö†Ô∏è  No API specs found. Make sure your tests are using jest-swag DSL functions.',
        );
        return;
      }

      // Update the global array with all specs
      clearApiSpecs();
      allSpecs.forEach((spec) => apiSpecs.push(spec));

      console.log(
        `üìù Found ${allSpecs.length} API spec(s). Generating OpenAPI documentation...`,
      );

      // Generate the OpenAPI document
      const document = await this.generator.generate();

      console.log('‚úÖ OpenAPI documentation generated successfully!');
      console.log(
        `   - Endpoints documented: ${Object.keys(document.paths).length}`,
      );
      console.log(`   - Total operations: ${allSpecs.length}`);

      // Optionally generate additional formats or serve UI
      await this.generateAdditionalOutputs(document);
    } catch (error) {
      console.error('‚ùå Failed to generate OpenAPI documentation:', error);
    }
  }

  private async generateAdditionalOutputs(document: any): Promise<void> {
    try {
      const outputDir = path.dirname(
        this.generator['config'].outputPath || './docs/openapi.json',
      );

      // Generate YAML version if requested
      const yamlPath = path.join(outputDir, 'openapi.yaml');
      if (this.shouldGenerateYaml()) {
        const yaml = this.convertToYaml(document);
        fs.writeFileSync(yamlPath, yaml);
        console.log(`   - YAML version: ${yamlPath}`);
      }

      // Generate HTML documentation
      const htmlPath = path.join(outputDir, 'index.html');
      const htmlContent = this.generateSwaggerUI(document);
      fs.writeFileSync(htmlPath, htmlContent);
      console.log(`   - Swagger UI: ${htmlPath}`);
    } catch (error) {
      console.warn('‚ö†Ô∏è  Failed to generate additional outputs:', error);
    }
  }

  private shouldGenerateYaml(): boolean {
    // For now, always generate YAML
    return true;
  }

  private convertToYaml(document: any): string {
    // Simple YAML conversion for basic cases
    // In production, you'd use a proper YAML library like 'js-yaml'
    return `# Generated by jest-swag
openapi: "${document.openapi}"
info:
  title: "${document.info.title}"
  version: "${document.info.version}"
  description: "${document.info.description || ''}"
${this.convertPathsToYaml(document.paths)}`;
  }

  private convertPathsToYaml(paths: any): string {
    let yaml = 'paths:\n';
    Object.entries(paths).forEach(([path, methods]: [string, any]) => {
      yaml += `  "${path}":\n`;
      Object.entries(methods).forEach(([method, operation]: [string, any]) => {
        yaml += `    ${method}:\n`;
        yaml += `      summary: "${operation.summary || ''}"\n`;
        yaml += `      responses:\n`;
        Object.entries(operation.responses).forEach(
          ([status, response]: [string, any]) => {
            yaml += `        "${status}":\n`;
            yaml += `          description: "${response.description || ''}"\n`;
          },
        );
      });
    });
    return yaml;
  }

  private generateSwaggerUI(document: any): string {
    const jsonDoc = JSON.stringify(document, null, 2);

    return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${document.info.title} - API Documentation</title>
    <link rel="stylesheet" type="text/css" href="https://unpkg.com/swagger-ui-dist@5.10.5/swagger-ui.css" />
    <style>
        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }
        *, *:before, *:after {
            box-sizing: inherit;
        }
        body {
            margin:0;
            background: #fafafa;
        }
    </style>
</head>
<body>
    <div id="swagger-ui"></div>
    <script src="https://unpkg.com/swagger-ui-dist@5.10.5/swagger-ui-bundle.js"></script>
    <script src="https://unpkg.com/swagger-ui-dist@5.10.5/swagger-ui-standalone-preset.js"></script>
    <script>
        window.onload = function() {
            const ui = SwaggerUIBundle({
                spec: ${jsonDoc},
                dom_id: '#swagger-ui',
                deepLinking: true,
                presets: [
                    SwaggerUIBundle.presets.apis,
                    SwaggerUIStandalonePreset
                ],
                plugins: [
                    SwaggerUIBundle.plugins.DownloadUrl
                ],
                layout: "StandaloneLayout"
            });
        };
    </script>
</body>
</html>`;
  }
}

// Export for CommonJS compatibility
module.exports = JestSwagReporter;
