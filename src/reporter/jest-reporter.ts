/**
 * Jest reporter for generating OpenAPI documentation
 */

import { AggregatedResult, Test, TestResult } from '@jest/test-result';
import { Config } from '@jest/types';
import * as fs from 'fs';
import * as path from 'path';
import {
  defaultGenerator,
  OpenAPIGenerator,
} from '../generator/openapi-generator';
import { apiSpecs, clearApiSpecs, loadSpecsFromFile, cleanupTempSpecFile, disableFilePersistence } from '../utils';

export default class JestSwagReporter {
  private config: Config.GlobalConfig;
  private generator: OpenAPIGenerator;

  constructor(globalConfig: Config.GlobalConfig, options: any = {}) {
    this.config = globalConfig;

    // Initialize generator with custom options if provided
    this.generator = options.generator || defaultGenerator;

    // Configure generator from options
    if (
      options.title ||
      options.version ||
      options.description ||
      options.servers ||
      options.outputPath
    ) {
      this.generator = new OpenAPIGenerator({
        title: options.title || 'API Documentation',
        version: options.version || '1.0.0',
        description: options.description,
        servers: options.servers,
        outputPath: options.outputPath,
      });
    }
  }

  onRunStart(): void {
    // Clear any existing specs at the start
    clearApiSpecs();
  }

  onTestResult(test: Test, testResult: TestResult): void {
    // Tests are collecting API specs as they run
    // We don't need to do anything here
  }

  async onRunComplete(
    contexts: Set<any>,
    results: AggregatedResult,
  ): Promise<void> {
    try {
      // 모든 테스트가 성공했는지 확인
      const hasFailedTests =
        results.numFailedTests > 0 ||
        results.numFailedTestSuites > 0 ||
        results.numRuntimeErrorTestSuites > 0;

      if (hasFailedTests) {
        // 실패한 테스트가 있어도 임시 파일은 정리
        cleanupTempSpecFile();
        return;
      }

      // Load specs from file system (for cross-process compatibility)
      const fileSpecs = loadSpecsFromFile();
      const allSpecs = [...apiSpecs, ...fileSpecs];

      if (allSpecs.length === 0) {
        // 스펙이 없어도 임시 파일은 정리
        cleanupTempSpecFile();
        return;
      }

      // Disable file persistence before updating specs
      disableFilePersistence();

      // Update the global array with all specs
      clearApiSpecs();
      allSpecs.forEach((spec) => apiSpecs.push(spec));

      // Generate the OpenAPI document
      const document = await this.generator.generate();

      // Optionally generate additional formats or serve UI
      await this.generateAdditionalOutputs(document);

      // 문서 생성 완료 후 임시 스펙 파일 정리
      cleanupTempSpecFile();
    } catch (error) {
      // 에러가 발생해도 임시 파일은 정리
      cleanupTempSpecFile();
    }
  }

  private async generateAdditionalOutputs(document: any): Promise<void> {
    try {
      const outputDir = path.dirname(
        this.generator['config'].outputPath || './docs/openapi.json',
      );

      // Generate YAML version if requested
      const yamlPath = path.join(outputDir, 'openapi.yaml');
      if (this.shouldGenerateYaml()) {
        const yaml = this.convertToYaml(document);
        fs.writeFileSync(yamlPath, yaml);
      }

      // Generate HTML documentation
      const htmlPath = path.join(outputDir, 'index.html');
      const htmlContent = this.generateSwaggerUI(document);
      fs.writeFileSync(htmlPath, htmlContent);
    } catch (error) {}
  }

  private shouldGenerateYaml(): boolean {
    // For now, always generate YAML
    return true;
  }

  // Performance: Cache YAML conversion
  private yamlCache: { document: any; yaml: string } | null = null;

  private convertToYaml(document: any): string {
    // Performance: Return cached YAML if document hasn't changed
    if (this.yamlCache && JSON.stringify(this.yamlCache.document) === JSON.stringify(document)) {
      return this.yamlCache.yaml;
    }

    // Simple YAML conversion for basic cases
    // Performance: Use string builder pattern
    const yamlParts: string[] = [
      '# Generated by jest-swag',
      `openapi: "${document.openapi}"`,
      'info:',
      `  title: "${document.info.title}"`,
      `  version: "${document.info.version}"`,
      `  description: "${document.info.description || ''}"`,
    ];
    
    yamlParts.push(this.convertPathsToYaml(document.paths));
    const yaml = yamlParts.join('\n');
    
    // Cache the result
    this.yamlCache = { document: JSON.parse(JSON.stringify(document)), yaml };
    
    return yaml;
  }

  private convertPathsToYaml(paths: any): string {
    // Performance: Use array join instead of string concatenation
    const yamlParts: string[] = ['paths:'];
    
    const pathEntries = Object.entries(paths);
    for (let i = 0; i < pathEntries.length; i++) {
      const [path, methods] = pathEntries[i] as [string, any];
      yamlParts.push(`  "${path}":`);
      
      const methodEntries = Object.entries(methods);
      for (let j = 0; j < methodEntries.length; j++) {
        const [method, operation] = methodEntries[j] as [string, any];
        yamlParts.push(`    ${method}:`);
        yamlParts.push(`      summary: "${operation.summary || ''}"`);
        yamlParts.push(`      responses:`);
        
        const responseEntries = Object.entries(operation.responses);
        for (let k = 0; k < responseEntries.length; k++) {
          const [status, response] = responseEntries[k] as [string, any];
          yamlParts.push(`        "${status}":`);
          yamlParts.push(`          description: "${response.description || ''}"`);
        }
      }
    }
    
    return yamlParts.join('\n');
  }

  private generateSwaggerUI(document: any): string {
    const jsonDoc = JSON.stringify(document, null, 2);

    return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${document.info.title} - API Documentation</title>
    <link rel="stylesheet" type="text/css" href="https://unpkg.com/swagger-ui-dist@5.10.5/swagger-ui.css" />
    <style>
        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }
        *, *:before, *:after {
            box-sizing: inherit;
        }
        body {
            margin:0;
            background: #fafafa;
        }
    </style>
</head>
<body>
    <div id="swagger-ui"></div>
    <script src="https://unpkg.com/swagger-ui-dist@5.10.5/swagger-ui-bundle.js"></script>
    <script src="https://unpkg.com/swagger-ui-dist@5.10.5/swagger-ui-standalone-preset.js"></script>
    <script>
        window.onload = function() {
            const ui = SwaggerUIBundle({
                spec: ${jsonDoc},
                dom_id: '#swagger-ui',
                deepLinking: true,
                presets: [
                    SwaggerUIBundle.presets.apis,
                    SwaggerUIStandalonePreset
                ],
                plugins: [
                    SwaggerUIBundle.plugins.DownloadUrl
                ],
                layout: "StandaloneLayout"
            });
        };
    </script>
</body>
</html>`;
  }

  // cleanupTempFiles method is no longer needed as we use cleanupTempSpecFile from utils
}

// Export for CommonJS compatibility
module.exports = JestSwagReporter;
