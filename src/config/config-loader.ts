/**
 * Configuration loader for jest-swag
 * Supports multiple config file formats and locations
 */

import * as fs from 'fs';
import * as path from 'path';

export interface JestSwagConfig {
  title?: string;
  version?: string;
  description?: string;
  outputPath?: string;
  servers?: Array<{
    url: string;
    description?: string;
  }>;
  environments?: {
    [key: string]: {
      servers: Array<{
        url: string;
        description?: string;
      }>;
    };
  };
  plugins?: Array<{
    name: string;
    options?: any;
  }>;
  hooks?: {
    beforeGenerate?: () => void | Promise<void>;
    afterGenerate?: (document: any) => void | Promise<void>;
  };
  schemaOptions?: {
    detectDates?: boolean;
    detectUUIDs?: boolean;
    detectEmails?: boolean;
    detectUrls?: boolean;
  };
}

export class ConfigLoader {
  private static instance: ConfigLoader;
  private config: JestSwagConfig | null = null;
  private configPath: string | null = null;

  private constructor() {}

  static getInstance(): ConfigLoader {
    if (!ConfigLoader.instance) {
      ConfigLoader.instance = new ConfigLoader();
    }
    return ConfigLoader.instance;
  }

  /**
   * Load configuration from various sources
   * Priority: CLI args > Config files > package.json > defaults
   */
  async loadConfig(cliOptions?: Partial<JestSwagConfig>): Promise<JestSwagConfig> {
    if (this.config && !cliOptions) {
      return this.config;
    }

    const defaultConfig: JestSwagConfig = {
      title: 'API Documentation',
      version: '1.0.0',
      description: 'API Documentation generated by jest-swag',
      outputPath: './docs/openapi.json',
      servers: [
        {
          url: 'http://localhost:3000',
          description: 'Development server',
        },
      ],
      schemaOptions: {
        detectDates: true,
        detectUUIDs: true,
        detectEmails: true,
        detectUrls: true,
      },
    };

    // 1. Try to find config file
    const configFromFile = await this.findAndLoadConfigFile();

    // 2. Try to load from package.json
    const configFromPackageJson = this.loadFromPackageJson();

    // 3. Get environment-specific config
    const environment = process.env.NODE_ENV || 'development';
    let envConfig = {};
    
    if (configFromFile?.environments?.[environment]) {
      envConfig = configFromFile.environments[environment];
    } else if (configFromPackageJson?.environments?.[environment]) {
      envConfig = configFromPackageJson.environments[environment];
    }

    // 4. Merge configurations (priority: CLI > file > package.json > env > defaults)
    this.config = {
      ...defaultConfig,
      ...configFromPackageJson,
      ...configFromFile,
      ...envConfig,
      ...cliOptions,
    };

    // 5. Apply environment variables
    this.applyEnvironmentVariables();

    return this.config;
  }

  /**
   * Find and load config file from various locations
   */
  private async findAndLoadConfigFile(): Promise<JestSwagConfig | null> {
    const configNames = [
      'jest-swag.config.js',
      'jest-swag.config.json',
      'jest-swag.config.yaml',
      'jest-swag.config.yml',
      '.jest-swagrc',
      '.jest-swagrc.json',
      '.jest-swagrc.js',
    ];

    const cwd = process.cwd();

    for (const configName of configNames) {
      const configPath = path.join(cwd, configName);
      if (fs.existsSync(configPath)) {
        this.configPath = configPath;
        return this.loadConfigFile(configPath);
      }
    }

    return null;
  }

  /**
   * Load configuration from a specific file
   */
  private loadConfigFile(filePath: string): JestSwagConfig | null {
    try {
      const ext = path.extname(filePath);
      const fileContent = fs.readFileSync(filePath, 'utf8');

      if (ext === '.js') {
        // Clear require cache for hot reload support
        delete require.cache[require.resolve(filePath)];
        return require(filePath);
      } else if (ext === '.json' || filePath.endsWith('.jest-swagrc')) {
        return JSON.parse(fileContent);
      } else if (ext === '.yaml' || ext === '.yml') {
        // Optional YAML support
        try {
          const yaml = require('js-yaml');
          return yaml.load(fileContent);
        } catch (e) {
          console.warn('YAML support requires js-yaml package. Falling back to JSON.');
          return null;
        }
      }
    } catch (error) {
      console.error(`Error loading config file ${filePath}:`, error);
    }

    return null;
  }

  /**
   * Load configuration from package.json
   */
  private loadFromPackageJson(): JestSwagConfig | null {
    try {
      const packageJsonPath = path.join(process.cwd(), 'package.json');
      if (fs.existsSync(packageJsonPath)) {
        const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
        return packageJson.jestSwag || null;
      }
    } catch (error) {
      console.error('Error loading package.json:', error);
    }

    return null;
  }

  /**
   * Apply environment variables to configuration
   */
  private applyEnvironmentVariables(): void {
    if (!this.config) return;

    // Override with environment variables if set
    if (process.env.JEST_SWAG_TITLE) {
      this.config.title = process.env.JEST_SWAG_TITLE;
    }
    if (process.env.JEST_SWAG_VERSION) {
      this.config.version = process.env.JEST_SWAG_VERSION;
    }
    if (process.env.JEST_SWAG_OUTPUT) {
      this.config.outputPath = process.env.JEST_SWAG_OUTPUT;
    }
    if (process.env.JEST_SWAG_SERVER_URL) {
      this.config.servers = [
        {
          url: process.env.JEST_SWAG_SERVER_URL,
          description: process.env.JEST_SWAG_SERVER_DESC || 'Server',
        },
      ];
    }
  }

  /**
   * Get current configuration
   */
  getConfig(): JestSwagConfig | null {
    return this.config;
  }

  /**
   * Get config file path
   */
  getConfigPath(): string | null {
    return this.configPath;
  }

  /**
   * Reload configuration
   */
  async reloadConfig(): Promise<JestSwagConfig> {
    this.config = null;
    return this.loadConfig();
  }

  /**
   * Watch config file for changes
   */
  watchConfig(callback: (config: JestSwagConfig) => void): fs.FSWatcher | null {
    if (!this.configPath) return null;

    return fs.watch(this.configPath, async (eventType) => {
      if (eventType === 'change') {
        const newConfig = await this.reloadConfig();
        callback(newConfig);
      }
    });
  }
}

export default ConfigLoader.getInstance();